" /// @file .vimrc
" /// @brief -
" /// @author jiahfong
" /// @version 0.0.42
" /// @date 2020-10-03
"
" How to install:
"   Download specified dependenceis below and place this .vimrc file in your
"   home directory. 
"
" Shortcuts:
"   * [e ]e         => swap lines
"   * [b ]b         => switch buffers
"   * [m ]m         => next method
"   * [g ]g         => next warning/error
"   * ctrl-p        => fuzzy search
"   * ctrl-n        => multi-cursor
"   * <leader>-rn   => rename symbol
"   * gd            => go to definition
"   * gr            => go to references
"   * gi            => go to implementation
"   * gy            => go to type definition
"   * shift-k       => help (doc page)
"   * :Format       => formats page
"   * :G[diff|blame]=> git commands
"
" Features:
"   * NERDTree (:NerdTree)
"   * auto completion (coc.vim)
"   * snippets 
"   * Doxygen

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  silent !curl -fLo ~/.vim/.ycm_extra_conf.py --create-dirs
    \ https://raw.githubusercontent.com/darthhorse/dotfiles/master/.ycm_extra_conf.py
  silent !curl -fLo ~/.vim/UltiSnips/python.snippets --create-dirs
    \ https://raw.githubusercontent.com/darthhorse/dotfiles/master/UltiSnips/python.snippets
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

    """""""""""""""""""""""""""
    " Plugins
    """""""""""""""""""""""""""

    " surrounds word with adjective
    Plug 'tpope/vim-surround'

    " commenting
    Plug 'tomtom/tcomment_vim'

    " [e ]b [<space> etc. (just try it)
    Plug 'tpope/vim-unimpaired'

    " . now has repeat on steroids
    Plug 'tpope/vim-repeat'

    " git commands
    Plug 'tpope/vim-fugitive'

    " doxygen generator
    Plug 'vim-scripts/DoxygenToolkit.vim'

    " NERDtree
    Plug 'scrooloose/nerdtree'

    " laststatus=2
    Plug 'bling/vim-airline'

    " fuzzy finder
    Plug 'ctrlpvim/ctrlp.vim'

    " auto completer
    Plug 'neoclide/coc.nvim', {'branch': 'release'}
    Plug 'davidhalter/jedi-vim'

    " Snippets
    Plug 'SirVer/ultisnips'
    Plug 'honza/vim-snippets'

    " more % functions
    Plug 'tmhedberg/matchit'

    " auto close tags
    Plug 'alvan/vim-closetag'

    " () pair
    Plug 'jiangmiao/auto-pairs'

    " ctrl-n multi changing
    Plug 'terryma/vim-multiple-cursors'

    " nav between tmux and vim splits with ctrl-hjkl
    Plug 'christoomey/vim-tmux-navigator'

    " cmake completion
    Plug 'jansenm/vim-cmake'

    " Themes
    Plug 'chriskempson/base16-vim'
    Plug 'vim-airline/vim-airline-themes'
    Plug 'rust-lang/rust.vim'

call plug#end()

"""""""""""""""""""""""""""""""""""""""""""""""""""
" Vim Airline
"""""""""""""""""""""""""""""""""""""""""""""""""""
" Using powerline font
let g:airline_powerline_fonts = 1

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" tabline options
let g:airline_theme='base16'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#tab_nr_type = 1 " tab number
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'

"""""""""""""""""""""""""""""""""""""""""""""""""""
" Editor options
"""""""""""""""""""""""""""""""""""""""""""""""""""
" Sets the encoding to the utf-8 character set
set enc=utf-8
set term=screen-256color
set t_Co=256
" copy to system clipboard
" set clipboard=unnamed
" Y as y$
nnoremap Y y$
" Paste mode
set pastetoggle=<F2>
" Reload files changed externally to vim.
set autoread
" shows status line with filename, column/row coords, dirty bit
set laststatus=2
set ruler
" sets xterm title to display the name of the file currently being edited
set title
" shows mode (i.e. insert mode etc)
set showmode
" shows the keystrokes currently waiting to be processed
set showcmd
" always reports the number of lines changed
set report=0
" flashes the screen instead of beeping the computer
set visualbell t_vb=
" Allow the backspace button to backspace over indents, eols and the start of insert.
set backspace=indent,eol,start
" searches are incremental
set incsearch
" show matching bracket briefly
set showmatch
" don't wrap long lines
set nowrap
" Show non-white space characters when using :set list
set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<
" character to mark lines that exceed 80 characters
set listchars+=extends:@
" indent on new line is equal to indent on previous line
set smartindent
" tabstops are converted to spaces, ensuring the file always looks the same.
set expandtab
" tabstops set to 4 spaces
set tabstop=4
" width of an indent level
set shiftwidth=4
" smarttab uses shiftwidth at the start of a line and tabstop everywhere else.
set smarttab
" autoformats text, wraps lines, autoindents, continues comments etc.
" set formatoptions=croqn2
" write a backup of the current file (with an appended ~) on each write
set nobackup
"ignores the case in search patterns.
set ignorecase
set smartcase
" Highlights matching terms when searching.
set hlsearch
" Turns the mouse off.
set mouse=r
" turn on line-numbers.
set nu
set rnu
" tab autocompletion in the command space
set wildmenu
set wildmode=longest,full
" Toggles display of unprintable characters.
nnoremap <F5> :set list!<CR>
" allows . (repeat) on visually highlighted lines
vnoremap . :normal .<CR>

autocmd FileType yaml setlocal shiftwidth=2 tabstop=2
autocmd FileType rust setlocal shiftwidth=2 tabstop=2

" Override base16's colourscheme for solarized-dark (more red hues)
function! s:base16_customize() abort
  call Base16hi("Type", g:base16_gui08, "", g:base16_cterm08, "", "", "")
  call Base16hi("SpellBad", g:base16_gui01, g:base16_gui02, g:base16_cterm01, g:base16_cterm02, "bold,italic", "")
endfunction
augroup on_change_colorschema
  autocmd!
  autocmd ColorScheme * call s:base16_customize()
augroup END
" define the colourscheme using base16
syn on
let base16colorspace=256
if filereadable(expand("~/.vimrc_background"))
  let base16colorspace=256
  source ~/.vimrc_background
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""
" Doxygen
"""""""""""""""""""""""""""""""""""""""""""""""""""
" /// style docstring
let g:DoxygenToolkit_commentType = "C++"
" MIT license
let g:DoxygenToolkit_licenseTag = "Copyright (c) ".strftime("%Y")." - Jia-Hong Fong\<enter>\<enter>"
let g:DoxygenToolkit_licenseTag = g:DoxygenToolkit_licenseTag . "Permission is hereby granted, free of charge, to any person obtaining a copy\<enter>"
let g:DoxygenToolkit_licenseTag = g:DoxygenToolkit_licenseTag . "of this software and associated documentation files (the \"Software\"), to deal\<enter>"
let g:DoxygenToolkit_licenseTag = g:DoxygenToolkit_licenseTag . "in the Software without restriction, including without limitation the rights\<enter>"
let g:DoxygenToolkit_licenseTag = g:DoxygenToolkit_licenseTag . "to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\<enter>"
let g:DoxygenToolkit_licenseTag = g:DoxygenToolkit_licenseTag . "copies of the Software, and to permit persons to whom the Software is\<enter>"
let g:DoxygenToolkit_licenseTag = g:DoxygenToolkit_licenseTag . "furnished to do so, subject to the following conditions:\<enter>\<enter>"
let g:DoxygenToolkit_licenseTag = g:DoxygenToolkit_licenseTag . "The above copyright notice and this permission notice shall be included in all\<enter>"
let g:DoxygenToolkit_licenseTag = g:DoxygenToolkit_licenseTag . "copies or substantial portions of the Software.\<enter>\<enter>"
let g:DoxygenToolkit_licenseTag = g:DoxygenToolkit_licenseTag . "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\<enter>"
let g:DoxygenToolkit_licenseTag = g:DoxygenToolkit_licenseTag . "EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\<enter>"
let g:DoxygenToolkit_licenseTag = g:DoxygenToolkit_licenseTag . "MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\<enter>"
let g:DoxygenToolkit_licenseTag = g:DoxygenToolkit_licenseTag . "IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\<enter>"
let g:DoxygenToolkit_licenseTag = g:DoxygenToolkit_licenseTag . "DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\<enter>"
let g:DoxygenToolkit_licenseTag = g:DoxygenToolkit_licenseTag . "OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE\<enter>"
let g:DoxygenToolkit_licenseTag = g:DoxygenToolkit_licenseTag . "OR OTHER DEALINGS IN THE SOFTWARE."
let g:DoxygenToolkit_briefTag_funcName = "yes"


"""""""""""""""""""""""""""""""""""""""""""""""""""
" Tmux-split-vim
"""""""""""""""""""""""""""""""""""""""""""""""""""
" Easier split navigation  - ctrl [hjkl]
" and changes behavior if tmux is on (ie, tmux will work with vim easy navi)

if exists('$TMUX')
  function! TmuxOrSplitSwitch(wincmd, tmuxdir)
    let previous_winnr = winnr()
    silent! execute "wincmd " . a:wincmd
    if previous_winnr == winnr()
      call system("tmux select-pane -" . a:tmuxdir)
      redraw!
    endif
  endfunction

  let previous_title = substitute(system("tmux display-message -p '#{pane_title}'"), '\n', '', '')
  let &t_ti = "\<Esc>]2;vim\<Esc>\\" . &t_ti
  let &t_te = "\<Esc>]2;". previous_title . "\<Esc>\\" . &t_te

  nnoremap <silent> <C-h> :call TmuxOrSplitSwitch('h', 'L')<cr>
  nnoremap <silent> <C-j> :call TmuxOrSplitSwitch('j', 'D')<cr>
  nnoremap <silent> <C-k> :call TmuxOrSplitSwitch('k', 'U')<cr>
  nnoremap <silent> <C-l> :call TmuxOrSplitSwitch('l', 'R')<cr>
else
  map <C-h> <C-w>h
  map <C-j> <C-w>j
  map <C-k> <C-w>k
  map <C-l> <C-w>l
endif


"""""""""""""""""""""""""""""""""""""""""""""""""""
"    coc.nvim
"""""""""""""""""""""""""""""""""""""""""""""""""""
let g:coc_global_extensions = ['coc-pyright', 'coc-git', 'coc-snippets', 'coc-rust-analyzer']
" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
" set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
" if has("patch-8.1.1564")
"   " Recently vim can merge signcolumn and number column into one
"   set signcolumn=number
" else
  " set signcolumn=yes
" endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
" xmap <leader>a  <Plug>(coc-codeaction-selected)
" nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)
nmap <leader>a :CocAction<cr>

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>

" https://vim.fandom.com/wiki/Switching_case_of_characters#Twiddle_case
function! TwiddleCase(str)
  if a:str ==# toupper(a:str)
    let result = tolower(a:str)
  elseif a:str ==# tolower(a:str)
    let result = substitute(a:str,'\(\<\w\+\>\)', '\u\1', 'g')
  else
    let result = toupper(a:str)
  endif
  return result
endfunction
vnoremap ~ y:call setreg('', TwiddleCase(@"), getregtype(''))<CR>gv""Pgv

" Triger `autoread` when files changes on disk
" https://unix.stackexchange.com/questions/149209/refresh-changed-content-of-file-opened-in-vim/383044#383044
" https://vi.stackexchange.com/questions/13692/prevent-focusgained-autocmd-running-in-command-line-editing-mode
autocmd FocusGained,BufEnter,CursorHold,CursorHoldI *
        \ if mode() !~ '\v(c|r.?|!|t)' && getcmdwintype() == '' | checktime | endif

" Notification after file change
" https://vi.stackexchange.com/questions/13091/autocmd-event-for-autoread
autocmd FileChangedShellPost *
  \ echohl WarningMsg | echo "File changed on disk. Buffer reloaded." | echohl None
" set mouse=a
  function FindCursorPopUp()                                                                                                                                                                                            
     let radius = get(a:000, 0, 2)
     let srow = screenrow()
     let scol = screencol()
     " it's necessary to test entire rect, as some popup might be quite small
     for r in range(srow - radius, srow + radius)
       for c in range(scol - radius, scol + radius)
         let winid = popup_locate(r, c)
         if winid != 0
           return winid
         endif
       endfor
     endfor
   
     return 0
   endfunction
   
   function ScrollPopUp(down)
     let winid = FindCursorPopUp()
     if winid == 0
       return 0
     endif
   
     let pp = popup_getpos(winid)
     call popup_setoptions( winid,
           \ {'firstline' : pp.firstline + ( a:down ? 1 : -1 ) } )
   
     return 1
   endfunction
nnoremap <expr> <c-d> ScrollPopUp(1) ? '<esc>' : '<c-d>'
nnoremap <expr> <c-u> ScrollPopUp(0) ? '<esc>' : '<c-u>'
